package br.com.arlon;

import java.util.concurrent.atomic.AtomicLong;

import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

import br.com.arlon.exceptions.UnsupportedMathOperationException;

@RestController
@RequestMapping("/math")
public class MathController {
	
	private static final AtomicLong counter = new AtomicLong();
	
	@GetMapping("sum/{numberOne}/{numberTwo}")
	public Double sum(@PathVariable(value = "numberOne") String numberO, @PathVariable String numberTwo) throws Exception {
		
		
		if(!isNumeric(numberO) || !isNumeric(numberTwo)) {
			 throw new UnsupportedMathOperationException("Valor citado não é numérico");
		}
		return converterDouble(numberO) + converterDouble(numberTwo);
		
	}
	
	@GetMapping("sub/{numberOne}/{numberTwo}")
	public Double sub(@PathVariable(value = "numberOne") String numberO, @PathVariable String numberTwo) throws Exception {
		
		
		if(!isNumeric(numberO) || !isNumeric(numberTwo)) {
			 throw new UnsupportedMathOperationException("Valor citado não é numérico");
		}
		return converterDouble(numberO) - converterDouble(numberTwo);
		
	}
	
	@GetMapping("mult/{numberOne}/{numberTwo}")
	public Double mult(@PathVariable(value = "numberOne") String numberO, @PathVariable String numberTwo) throws Exception {
		
		
		if(!isNumeric(numberO) || !isNumeric(numberTwo)) {
			 throw new UnsupportedMathOperationException("Valor citado não é numérico");
		}
		return converterDouble(numberO) * converterDouble(numberTwo);
		
	}
	
	@GetMapping("div/{numberOne}/{numberTwo}")
	public Double div(@PathVariable(value = "numberOne") String numberO, @PathVariable String numberTwo) throws Exception {
		
		
		if(!isNumeric(numberO) || !isNumeric(numberTwo)) {
			throw new UnsupportedMathOperationException("Valor citado não é numérico");
		}
		return converterDouble(numberO) / converterDouble(numberTwo);
		
	}

	private Double converterDouble(String number) {
		if(number == null) {
			return 0D;
		}
		String str = number.replaceAll(",", ".");
		if(isNumeric(str)) {
			return Double.parseDouble(str);
		}
		
		return 0.0;		
	}

	private boolean isNumeric(String number) {
		if(number == null) {
			return false;
		}
		String str = number.replaceAll(",", ".");
		return str.matches("[+-]?[0-9]*\\.?[0-9]+");
	}

}
