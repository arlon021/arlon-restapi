package br.com.arlon;

import java.util.concurrent.atomic.AtomicLong;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

import br.com.arlon.exceptions.UnsupportedMathOperationException;
import br.com.arlon.utils.NumberConverterUtils;

@RestController
@RequestMapping("/math")
public class MathController {
	
	private static final AtomicLong counter = new AtomicLong();
	
	@Autowired
	NumberConverterUtils converterUtils;
	
	@GetMapping("sum/{numberOne}/{numberTwo}")
	public Double sum(@PathVariable(value = "numberOne") String numberO, @PathVariable String numberTwo) throws Exception {
		
		
		if(!converterUtils.isNumeric(numberO) || !converterUtils.isNumeric(numberTwo)) {
			 throw new UnsupportedMathOperationException("Valor citado não é numérico");
		}
		return converterUtils.converterDouble(numberO) + converterUtils.converterDouble(numberTwo);
		
	}
	
	@GetMapping("sub/{numberOne}/{numberTwo}")
	public Double sub(@PathVariable(value = "numberOne") String numberO, @PathVariable String numberTwo) throws Exception {
		
		
		if(!isNumeric(numberO) || !isNumeric(numberTwo)) {
			 throw new UnsupportedMathOperationException("Valor citado não é numérico");
		}
		return converterDouble(numberO) - converterDouble(numberTwo);
		
	}
	
	@GetMapping("mult/{numberOne}/{numberTwo}")
	public Double mult(@PathVariable(value = "numberOne") String numberO, @PathVariable String numberTwo) throws Exception {
		
		
		if(!isNumeric(numberO) || !isNumeric(numberTwo)) {
			 throw new UnsupportedMathOperationException("Valor citado não é numérico");
		}
		return converterDouble(numberO) * converterDouble(numberTwo);
		
	}
	
	@GetMapping("div/{numberOne}/{numberTwo}")
	public Double div(@PathVariable(value = "numberOne") String numberO, @PathVariable String numberTwo) throws Exception {
		
		
		if(!isNumeric(numberO) || !isNumeric(numberTwo)) {
			throw new UnsupportedMathOperationException("Valor citado não é numérico");
		}
		return converterDouble(numberTwo) / converterDouble(numberO);
		
	}
	
	@GetMapping("media/{numberOne}/{numberTwo}")
	public Double media(@PathVariable(value = "numberOne") String numberO, @PathVariable String numberTwo) throws Exception {
		
		
		if(!isNumeric(numberO) || !isNumeric(numberTwo)) {
			throw new UnsupportedMathOperationException("Valor citado não é numérico");
		}
		return (converterDouble(numberTwo) + converterDouble(numberO)) / 2;
		
	}
	
	@GetMapping("raiz/{numberOne}")
	public Double raiz(@PathVariable(value = "numberOne") String numberO) throws Exception {
		
		
		if(!isNumeric(numberO)) {
			throw new UnsupportedMathOperationException("Valor citado não é numérico");
		}
		return Math.sqrt(converterDouble(numberO));
		
	}


}
